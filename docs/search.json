[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "NYC Crime Stats",
    "section": "",
    "text": "1 Introduction\nFor visitors and people who are new to New York, safety often comes to mind. We’d like to identify any trends to see which areas/boroughs are actually dangerous. We are especially curious about this since we are also new to the city.\nA few questions that come to mind are:\n\nWhat areas/boroughs are dangerous (tend to have more crime than other areas)?\nWhat areas are safe (tend to have less crime than other areas)?\nWhat types of crimes occurred?\nAre there seasonal patterns or trends over time when crimes occurred?\nAre there patterns in the premises these crimes occurred in?\nHow effective are different types of authorities in responding and stopping these crimes?\nWhat groups are frequently targeted?"
  },
  {
    "objectID": "data.html#description",
    "href": "data.html#description",
    "title": "2  Data",
    "section": "2.1 Description",
    "text": "2.1 Description\nThis dataset includes all valid felony, misdemeanor, and violation crimes reported to the New York City Police Department (NYPD) for all complete quarters so far this year (2023). This data is manually extracted and reviewed by the Office of Management Analysis and Planning.\nEach record represents a criminal complaint in NYC and includes information about the type of crime, the location and time of enforcement. In addition, information related to victim and suspect demographics is also included.\nThe data is provided by NYPD and is updated quarterly. It was made public in November 2018.\nWe can download the data from the NYPD and import into R as a csv file. Go to “export”, then download as CSV. It can be downloaded from: https://data.cityofnewyork.us/Public-Safety/NYPD-Complaint-Data-Current-Year-To-Date-/5uac-w243/data\nThere are 415310 rows and 36 columns. Important columns include:\nLocation:\n\nPrecinct where incident occurred\nBorough where incident occurred\nPatrol borough in which incident occurred\nPremise (grocery store, residence, street, etc)\nLocation at premise (inside premises, front of, rear of, etc)\nTransit station name\nParks: NYC park, greenspace, playground, if applicable\nNYCHA housing development level\nLatitude/Longitude\n\nCrime details:\n\nDate of incident\nTime of incident\nLevel of offense (felony, misdemeanor, violation)\nCrime success (indicates if crime was successful or failed)\nJurisdiction responsible for incident (ex: police, transit police, long island rail road, etc)\n\nIndividuals’ info:\n\nSuspect’s Age group\nSuspect’s race\nSuspect’s sex\nVictim’s age group\nVictim’s race\nVictim’s sex\n\nThere are also end date and end time columns, which are populated if initial date and time are not known. We will have to handle the rows where the exact timing of the crime is unknown.\nWe have details on the location, date, time, type of crime, premise, jurisdiction responsible, and crime success. We can look at the frequency of different crime levels across locations, premises, dates, and times. The location information (including latitude, longitude, and precinct) would allow us to plot a heatmap on top of the NYC map (which we can access from publicly available datasets in the form of shapely files) and visualize which neighborhoods are most prone to crime and which types of crimes are more prone in certain areas. The temporal information (including the date and times) could allow us to plot a timeseries graph to uncover insights on seasonal changes on different types of crime. This will shed insight on what parts of the year or day of the week are prone to certain types of crimes. Not only that, we can also compare different crime levels across victim age, race, and sex to observe if there is a correlation between age, race and sex to chance of being victimized by crime. We can also plot the frequency of successful crimes to failed ones across jurisdictions to analyze how often crimes are successful, and which jurisdiction fails or succeeds to stop them. This would also allow us to see what type of crimes are least likely to be committed successfully and at which times of the year and what locations within NYC."
  },
  {
    "objectID": "data.html#missing-value-analysis",
    "href": "data.html#missing-value-analysis",
    "title": "2  Data",
    "section": "2.2 Missing value analysis",
    "text": "2.2 Missing value analysis\nHere we will plot only the columns that have null values. The other columns don’t have any null values:\n\n\nCode\ndf &lt;- read.csv('NYPD_Complaint_Data_Current__Year_To_Date_.csv')\ndf[df == \"(null)\"] &lt;- NA\n#df\n\n\n\n\nCode\nis_na &lt;- is.na(df)\nmissing_counts_sum &lt;- colSums(is_na)\nmissing_counts_percent &lt;- colMeans(is_na)\n\nplot_data_sum &lt;- data.frame(\n  column = names(missing_counts_sum),\n  missing_count = missing_counts_sum\n)\n\nplot_data_sum$column &lt;- factor(plot_data_sum$column, levels = plot_data_sum$column[order(plot_data_sum$missing_count)])\n\n\n\nplot_data_percent &lt;- data.frame(\n  column = names(missing_counts_percent),\n  missing_count = missing_counts_percent\n)\n\nplot_data_percent$column &lt;- factor(plot_data_percent$column, levels = plot_data_percent$column[order(plot_data_percent$missing_count)])\n\n\n\n\nCode\n#print(nrow(df))\n\n\n\n\nCode\nlibrary(ggplot2)\n\nggplot(plot_data_sum[plot_data_sum$missing_count &gt; 0, ], aes(x = column, y = missing_count)) +\n  geom_bar(stat = \"identity\", color = \"black\") +\n  labs(title = \"Number of missing values\", x = \"Column Names\", y = \"Counts\") +\n  theme_minimal() +\n  coord_flip()\n\n\n\n\n\nCode\nggplot(plot_data_percent[plot_data_percent$missing_count &gt; 0, ], aes(x = column, y = missing_count)) +\n  geom_bar(stat = \"identity\", color = \"black\") +\n  labs(title = \"Percent of missing values\", x = \"Column Names\", y = \"Percentage\") +\n  theme_minimal() +\n  coord_flip()\n\n\n\n\n\nThere are some columns with almost all values missing: Hadevelopt, Parks_nm, Transit_district, Station_name, Housing_psa\nHadevelopt is the name of the housing development occurrence, and housing_psa is the development level code. This just means that almost all the crimes don’t happen around housing development. This makes sense since housing development in NYC is very scarce (one of the reasons housing is very expensive in the city).\nParks_nm indicates if the crime happened in a park or playground, so null values indicate most crimes did not happen in these areas. The same reasoning can be applied for null values for Station_name (indicating a subway station) and transit_district (district code for subway station).\nFor these columns, missing values just indicates the crime did not occur at that particular location. Since almost all the values are missing, we can drop these columns. We have another column that describes the location of the crime, so we aren’t losing any valuable information by dropping these.\n\n\nCode\nfiltered_rows &lt;- df[is.na(df$LOC_OF_OCCUR_DESC), ]\ncategory_counts &lt;- table(filtered_rows$PREM_TYP_DESC)\n\nbarplot(category_counts[category_counts&gt;6000], main='Null premise location occurrences',\n        xlab = 'category',\n        ylab= 'count')\n\n\n\n\n\nLoc_of_occur_desc indicates if a crime occurred inside, in front of, or behind a premise. We noticed the null values happen when the premise is either the street or an NYC subway, so the exact location around the premises doesn’t make sense. We can probably drop this column since the information is not that useful.\nLet’s use another plot to examine the smaller missing values.\n\n\nCode\nggplot(plot_data_sum[plot_data_sum$missing_count &gt; 0 & plot_data_sum$missing_count &lt; 60000, ], aes(x = column, y = missing_count)) +\n  geom_bar(stat = \"identity\", color = \"black\") +\n  labs(title = \"Number of missing values (below 60000)\", x = \"Column Names\", y = \"Counts\") +\n  theme_minimal() +\n  coord_flip()\n\n\n\n\n\nThe count of missing values for suspect sex, race, and age group are the same. This indicates that the suspect got away with the crime. We should examine this data later to see if there is a trend for suspects who escaped, so let’s keep these missing values.\n\n\nCode\nggplot(plot_data_sum[plot_data_sum$missing_count &gt; 0 & plot_data_sum$missing_count &lt; 700, ], aes(x = column, y = missing_count)) +\n  geom_bar(stat = \"identity\", color = \"black\") +\n  labs(title = \"Number of missing values (below 700)\", x = \"Column Names\", y = \"Counts\") +\n  theme_minimal() +\n  coord_flip()\n\n\n\n\n\nThe rest of these missing values are very minimal compared to amount of data we have. We can just drop these rows since missing values make up only about 1% for these features."
  },
  {
    "objectID": "results.html",
    "href": "results.html",
    "title": "3  Results",
    "section": "",
    "text": "Code\n#install.packages('nycmaps')\n#devtools::install_github(\"zachcp/nycmaps\")\n#install.packages('pak')\n#pak::pak('thomasp85/gganimate')\n#install.packages('gapminder')\n#install.packages(\"gifski\")\n#install.packages('png')\nlibrary(vcdExtra)\n\n\nLoading required package: vcd\n\n\nLoading required package: grid\n\n\nLoading required package: gnm\n\n\nCode\nlibrary(ggplot2)\nlibrary(dplyr)\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following object is masked from 'package:vcdExtra':\n\n    summarise\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nCode\nlibrary(ggplot2)\nlibrary(vcd)\nlibrary(stringr)\nlibrary(lubridate)\n\n\n\nAttaching package: 'lubridate'\n\n\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n\n\nCode\nlibrary(forcats)\nlibrary(nycmaps)\n\n\nLoading required package: maps\n\n\nCode\nlibrary(maps)\nlibrary(viridis)\n\n\nLoading required package: viridisLite\n\n\n\nAttaching package: 'viridis'\n\n\nThe following object is masked from 'package:maps':\n\n    unemp\n\n\nCode\nlibrary(png)\nlibrary(gifski)\nlibrary(gganimate)\nlibrary(gapminder)\n\norigin_df &lt;- read.csv('../NYPD_Complaint_Data_Current__Year_To_Date_.csv')\norigin_df[origin_df == \"(null)\"] &lt;- NA\norigin_df[origin_df == \"UNKNOWN\"] &lt;- NA\n\n\n\n\nCode\ndf &lt;- origin_df\nSys.setenv(LANG = \"en\")\n\n\n\n\nCode\n# Removing useless columns and preprocessing\ncols_to_remove &lt;- c('HADEVELOPT', 'PARKS_NM', 'TRANSIT_DISTRICT','STATION_NAME',\n                    'HOUSING_PSA', 'CMPLNT_NUM', 'LOC_OF_OCCUR_DESC',\n                    'JURISDICTION_CODE','KY_CD','PD_CD','RPT_DT','ADDR_PCT_CD')\ndf &lt;- df[, !(names(df) %in% cols_to_remove)]\n\ndf$Date &lt;- as.Date(df$CMPLNT_FR_DT, format = \"%m/%d/%Y\")\ndf$CMPLNT_FR_TM &lt;- strptime(df$CMPLNT_FR_TM, format = \"%H:%M:%S\")\ndf$Hour &lt;- format(df$CMPLNT_FR_TM, format = \"%H\")\n\ndf$Hour &lt;- as.integer(df$Hour)\n\n\ncols_to_remove &lt;- c('CMPLNT_FR_TM', 'CMPLNT_TO_DT','CMPLNT_TO_TM', 'CMPLNT_FR_DT')\ndf &lt;- df[, !(names(df) %in% cols_to_remove)]\n\n\n\n\nCode\ndf &lt;- df[order(df$Date), ]\n\nggplot(df, aes(x = Date)) +\n  geom_histogram(binwidth = 7, fill = \"skyblue\", color = \"black\", alpha = 0.7) +\n  geom_vline(xintercept = as.Date(\"2023-01-01\"), linetype = \"dashed\", color = \"red\", linewidth = 1) +\n  labs(title = \"Date Counts Histogram\", x = \"Date\", y = \"Count\") +\n  xlim(as.Date('2022-01-01'), max(df$Date)) +\n  theme_minimal()\n\n\nWarning: Removed 2197 rows containing non-finite values (`stat_bin()`).\n\n\nWarning: Removed 2 rows containing missing values (`geom_bar()`).\n\n\n\n\n\n\n\nCode\ndf &lt;- df[df$Date &gt;= as.Date('2023-01-01'), ]\ndf$Month &lt;- month(df$Date)\n# df$Month &lt;- as.integer(df$Month)\ndf$Month &lt;- factor(month.name[df$Month], levels = month.name)\n# df\n\n\n\n\nCode\nggplot(df, aes(x = Month, fill = fct_rev(factor(LAW_CAT_CD)))) +\n  geom_bar() +\n  labs(title = \"Crimes per month\", x = \"Month\", y = \"Frequency\", fill = \"Severity\") +\nscale_fill_manual(values = c(\"#BF0000\", \"#7F0000\", \"#3B0000\"))\n\n\n\n\n\nCode\n# ggplot(data = df, aes(x=Month)) +\n#   geom_bar(color = \"black\") +\n#   labs(title='Crimes per month faceted by offense') +\n#   geom_text(stat = \"count\", aes(label=after_stat(count)), vjust = -0.25, size = 3) +\n#   facet_wrap(facets = vars(LAW_CAT_CD), nrow = 3) +  # , scales = \"free_y\" ?\n#   ylim(0, 27500) +\n#   theme_bw()\n\n\n\n\nCode\nmonth_contingency_table &lt;- table(df$Month)\nmonth_contingency_table &lt;- month_contingency_table[month_contingency_table&gt;0]\n\nmonth_chi_sq &lt;- chisq.test(month_contingency_table)\n# print(month_contingency_table)\nprint(month_chi_sq)\n\n\n\n    Chi-squared test for given probabilities\n\ndata:  month_contingency_table\nX-squared = 1538.1, df = 8, p-value &lt; 2.2e-16\n\n\n\n\nCode\nggplot(df, aes(x = factor(Hour), color = LAW_CAT_CD, group = LAW_CAT_CD)) +\n  geom_point(stat = \"count\", size = 3) +\n  geom_line(stat = \"count\", aes(group = LAW_CAT_CD), size = 1) +\n  labs(title = \"Crimes over time\",\n       x = \"Time (Hour)\", y = \"Count\", fill=\"Severity\") +\n  scale_color_manual(values = c( \"#3B0000\", \"#AF0000\", \"#FF0000\")) +\n  scale_x_discrete(breaks = seq(0, 24, by = 5), labels = function(x) sprintf(\"%02d:00\", as.numeric(x))) +\n  theme_minimal()\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\nCode\nggplot(df, aes(x = factor(Hour), color = LAW_CAT_CD, group = LAW_CAT_CD)) +\n  geom_point(stat = \"count\", size = 3) +\n  geom_line(stat = \"count\", aes(group = LAW_CAT_CD), size = 1) +\n  labs(title = \"Crimes over time\",\n       x = \"Time (Hour)\", y = \"Count\", fill=\"Severity\") +\n  scale_color_manual(values = c( \"#3B0000\", \"#AF0000\", \"#FF0000\")) +\n  scale_x_discrete(breaks = seq(0, 24, by = 5), labels = function(x) sprintf(\"%02d:00\", as.numeric(x))) +\n  theme_minimal()\n\n\n\n\n\n2022 population estimates were taken from: https://www.nyc.gov/site/planning/planning-level/nyc-population/nyc-population-current-estimates.page\n\n\nCode\nvalue_counts &lt;- table(df$BORO_NM)\ncount_df &lt;- data.frame(Category = names(value_counts), Count = as.numeric(value_counts))\npopulation &lt;- c(1379946, 2590516, 1596273, 2278029, 491133)\ncount_df$Pop &lt;- population\ncount_df$CrimePerPop &lt;- count_df$Count*100 / count_df$Pop\ncount_df &lt;- count_df[count_df$CrimePerPop &gt; 0,]\ncount_df &lt;- count_df[order(count_df$CrimePerPop), ]\n# ggplot(count_df, aes(x = CrimePerPop, y = reorder(Category, CrimePerPop))) +\n#   geom_bar(stat = \"identity\", fill = \"skyblue\") +\n#   labs(title = \"Ratio of Crimes to population by Borough\",\n#        x = \"Crime/Capita ()\",\n#        y = \"Borough\") +\n#   theme_minimal()\n\n\ncrime_counts &lt;- df %&gt;%\n  group_by(BORO_NM, LAW_CAT_CD) %&gt;%\n  summarise(CrimeCount = n()) %&gt;%\n  ungroup()\n\n\n`summarise()` has grouped output by 'BORO_NM'. You can override using the\n`.groups` argument.\n\n\nCode\ncolnames(crime_counts)[colnames(crime_counts) == \"BORO_NM\"] &lt;- \"Category\"\ncrime_counts &lt;- merge(crime_counts, count_df, by='Category', all.x=TRUE)\ncrime_counts &lt;- crime_counts[, c('Category', 'LAW_CAT_CD', 'CrimeCount', 'Pop')]\ncrime_counts &lt;- crime_counts[!crime_counts$Category %in% NA,]\ncrime_counts$CrimePerPop &lt;- 100000*crime_counts$CrimeCount/crime_counts$Pop\n\n\n\nggplot(crime_counts, aes(x = CrimePerPop, y = reorder(Category, CrimePerPop), fill = fct_rev(LAW_CAT_CD))) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Crime per Capita by Borough\",\n       x = \"Crime per Capita\",\n       y = \"Borough\",\n       fill = \"Severity\") +\n  scale_fill_manual(values = c( \"#FF0000\", \"#AF0000\", \"#3B0000\"))+\n  theme_minimal()\n\n\n\n\n\n\n\nCode\nvalue_counts &lt;- table(df$LAW_CAT_CD)\n\ncount_df &lt;- data.frame(Category = names(value_counts), Count = as.numeric(value_counts))\ncount_df &lt;- count_df[count_df$Count &gt; 0,]\n\n\nggplot(count_df, aes(y = Count, x = Category)) +\n  geom_bar(stat = \"identity\", fill = \"skyblue\") +\n  labs(title = \"Frequency of Crimes by Severity\",\n       y = \"Frequency\",\n       x = \"Crime Severity\") +\n  theme_minimal() \n\n\n\n\n\nAccording to nycourts.gov and nyc.gov, these are the definitions of the different severity levels: https://www.nycourts.gov/courthelp/criminal/typesCriminalCases.shtml https://www.nyc.gov/site/nypd/services/victim-services/glossary.page\nViolation: Any non-criminal offense, other than traffic infractions. An offense punishable by up to a $250 fine or up to 15 days in jail. Examples of common violations include disorderly conduct and trespassing.\nMisdemeanor: A misdemeanor is the lowest level of crime. It is more serious than a violation, but less serious than a felony. It is a crime punishable by probation, a fine, or up to one year in jail.\nFelony: The most serious types of crimes. Examples of felonies include murder, rape, robbery, arson, and selling/possessing controlled substances. It is punishable by imprisonment for more than one year, or as long as life imprisonment.\n\n\nCode\nvalue_counts &lt;- table(df[, c(\"OFNS_DESC\", \"LAW_CAT_CD\")])\ncount_df &lt;- data.frame(value_counts)\ncount_df$OFNS_DESC &lt;- paste(count_df$OFNS_DESC, count_df$LAW_CAT_CD, sep = \" \")\ncount_df &lt;- count_df[count_df$Freq &gt; 4000,]\n\ncount_df &lt;- count_df[order(count_df$Freq), ]\n\n\n\n\nCode\nvalue_counts &lt;- table(df[, c(\"OFNS_DESC\", \"LAW_CAT_CD\")])\ncount_df &lt;- data.frame(value_counts)\ncount_df$OFNS_DESC &lt;- paste(count_df$OFNS_DESC, count_df$LAW_CAT_CD, sep = \" \")\ncount_df &lt;- count_df[count_df$Freq &gt; 7000,]\n\ncount_df &lt;- count_df[order(count_df$Freq), ]\ncount_df$OFNS_DESC &lt;- str_wrap(count_df$OFNS_DESC, width = 30)\n\nggplot(count_df, aes(x = Freq, y = reorder(OFNS_DESC, Freq), fill = LAW_CAT_CD)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Most Common Crimes\",\n       y = \"Crime Type\",\n       x = \"Frequency\",\n       fill=\"Severity\") +\n  scale_fill_manual(values = c( \"#3B0000\", \"#AF0000\", \"#FF0000\")) +\n  theme_minimal() \n\n\n\n\n\nLarceny more likely to occur during the day when stores are open. Same with harassment since there are more people walking around.\n\n\nCode\nvalue_counts &lt;- table(df$PREM_TYP_DESC)\n\ncount_df &lt;- data.frame(Category = names(value_counts), Count = as.numeric(value_counts))\ncount_df &lt;- count_df[count_df$Count &gt; 7000,]\n\n\ncount_df &lt;- count_df[order(count_df$Count), ]\n\n\n# ggplot(count_df, aes(x = Count, y = reorder(Category, Count))) +\n#   geom_bar(stat = \"identity\", fill = \"skyblue\") +\n#   labs(title = \"Frequency of Crimes at Premise Type\",\n#        x = \"Frequency\",\n#        y = \"Premise Type\") +\n#   theme_minimal() \n\n\ncount_premise_df &lt;- df %&gt;% count(PREM_TYP_DESC)\nfiltered_df &lt;- count_premise_df[count_premise_df$n &gt; 7000, ]\nfiltered_df &lt;- filtered_df %&gt;% na.omit()\ndf$PREM_TYP_DESC &lt;- fct_rev(fct_infreq(df$PREM_TYP_DESC))\n\n\nggplot(df[df$PREM_TYP_DESC %in% filtered_df$PREM_TYP_DESC,], aes(y = PREM_TYP_DESC, fill = fct_rev(factor(LAW_CAT_CD)))) +\n  geom_bar() +\n  labs(title = \"Frequency of Crimes at Premise\",x=\"Frequency\", y = \"Premise Type\", fill = \"Severity\") +\nscale_fill_manual(values = c(\"#FF0000\", \"#AF0000\", \"#3B0000\"))\n\n\n\n\n\n\n\nCode\nvalue_counts &lt;- table(df[, c(\"OFNS_DESC\", \"PREM_TYP_DESC\")])\ncount_df &lt;- data.frame(value_counts)\n\nresult &lt;- count_df %&gt;%\n  group_by(PREM_TYP_DESC) %&gt;%\n  summarise(total_value = sum(Freq))\n\ncount_df &lt;- merge(count_df, result, by = \"PREM_TYP_DESC\")\ncount_df$ratio &lt;- count_df$Freq*100 / count_df$total_value\ncount_df &lt;- count_df[count_df$total_value &gt; 8000,]\ncount_df &lt;- count_df[count_df$ratio &gt; 0,]\n\nsorted_df &lt;- count_df %&gt;%\n  group_by(PREM_TYP_DESC) %&gt;%\n  arrange(desc(ratio)) %&gt;%\n  slice_head(n = 5)\n\nsorted_df$OFNS_DESC &lt;- str_sub(sorted_df$OFNS_DESC, end = 15)\nsorted_df$PREM_TYP_DESC &lt;- str_wrap(sorted_df$PREM_TYP_DESC, width = 15)\nsorted_df &lt;- sorted_df %&gt;% arrange(ratio)\n\n\n\nggplot(sorted_df, aes(x = ratio, y = reorder(factor(OFNS_DESC), ratio), fill = OFNS_DESC)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  facet_wrap(~PREM_TYP_DESC, scales = \"free\",ncol = 3) +\n  labs(title = \"Proportion of 5 most common offense across 9 highest crime rate premises\", x = \"Percent(%)\", y = \"Type of Offense\") +\n  theme( \n        strip.text = element_text(size = 7), \n        axis.text.y = element_text(size = 7)\n        ) + \n  guides(fill = FALSE) + \n  coord_cartesian(xlim = c(0, 100))\n\n\nWarning: The `&lt;scale&gt;` argument of `guides()` cannot be `FALSE`. Use \"none\" instead as\nof ggplot2 3.3.4.\n\n\n\n\n\n\n\nCode\n# susp_sex_df &lt;- df[df$SUSP_SEX != 'U',]\n# mosaicplot(table(susp_sex_df$LAW_CAT_CD, susp_sex_df$SUSP_SEX), main = \"Mosaic Plot of Suspect Age and Crime Category\", color = c(\"salmon\", \"lightblue\"))\n\n\n\n\nCode\nsusp_df &lt;- df[df$SUSP_SEX != 'U',]\nsusp_df &lt;- susp_df[susp_df$SUSP_AGE_GROUP %in% c('&lt;18','18-24','25-44','45-64', '65+'),]\ncolnames(susp_df)[colnames(susp_df) == \"SUSP_AGE_GROUP\"] &lt;- \"Suspect_Age_Group\"\ncolnames(susp_df)[colnames(susp_df) == \"SUSP_SEX\"] &lt;- \"Suspect_Sex\"\ncolnames(susp_df)[colnames(susp_df) == \"SUSP_RACE\"] &lt;- \"Suspect_Race\"\n\nsusp_df %&gt;%\n  vcd::mosaic(fct_rev(LAW_CAT_CD) ~ Suspect_Age_Group + Suspect_Sex, \n              data = .,\n              direction = c(\"v\", \"v\", \"h\"),\n              main = 'Suspect Age Group and Sex',\n              labeling = labeling_border(\n                      xlab = \"lab\",\n                       gp_labels = gpar(fontsize = 8),\n                       rot_labels = c(0,0,0,0),\n                       offset_label =c(0,0,0,-0.75),\n                       varnames = c(TRUE, TRUE, FALSE),\n                       just_labels=c(\"center\",\"right\")\n                       ))\n\n\n\n\n\nCode\nsusp_df %&gt;%\n  vcd::mosaic(fct_rev(LAW_CAT_CD) ~ Suspect_Race + Suspect_Sex, \n              data = .,\n              direction = c(\"v\", \"v\", \"h\"),\n              main = 'Suspect Race and Sex',\n              labeling = labeling_border(\n                      xlab = \"lab\",\n                       gp_labels = gpar(fontsize = 6.5),\n                       rot_labels = c(30,0,0,0),\n                       offset_label =c(1.2,0,0,-0.75),\n                       varnames = c(FALSE, TRUE, FALSE),\n                       just_labels=c(\"center\",\"right\")\n                       ))\n\n\n\n\n\n\n\nCode\nvic_df &lt;- df[!df$VIC_SEX %in% c('U', 'D', 'E', 'L'),]\nvic_df &lt;- vic_df[vic_df$VIC_AGE_GROUP %in% c('&lt;18','18-24','25-44','45-64', '65+'),]\ncolnames(vic_df)[colnames(vic_df) == \"VIC_AGE_GROUP\"] &lt;- \"Victim_Age_Group\"\ncolnames(vic_df)[colnames(vic_df) == \"VIC_SEX\"] &lt;- \"Victim_Sex\"\ncolnames(vic_df)[colnames(vic_df) == \"VIC_RACE\"] &lt;- \"Victim_Race\"\n\n\nvic_df %&gt;%\n  vcd::mosaic(fct_rev(LAW_CAT_CD) ~ Victim_Age_Group + Victim_Sex, \n              data = .,\n              direction = c(\"v\", \"v\", \"h\"),\n              main = 'Victim Age Group and Sex',\n              labeling = labeling_border(\n                      xlab = \"lab\",\n                       gp_labels = gpar(fontsize = 8),\n                       rot_labels = c(0,0,0,0),\n                       offset_label =c(0,0,0,-0.75),\n                       varnames = c(TRUE, TRUE, FALSE),\n                       just_labels=c(\"center\",\"right\")\n                       ))\n\n\n\n\n\nCode\nvic_df %&gt;%\n  vcd::mosaic(fct_rev(LAW_CAT_CD) ~ Victim_Race + Victim_Sex, \n              data = .,\n              direction = c(\"v\", \"v\", \"h\"),\n              main = 'Victim Race and Sex',\n              labeling = labeling_border(\n                      xlab = \"lab\",\n                       gp_labels = gpar(fontsize = 6.5),\n                       rot_labels = c(30,0,0,0),\n                       offset_label =c(1.5,0,0,-0.75),\n                       varnames = c(FALSE, TRUE, FALSE),\n                       just_labels=c(\"center\",\"right\")\n                       ))\n\n\n\n\n\n\n\nCode\nnyc_map &lt;- map(database=\"nyc\")\n\n\n\n\n\nCode\ndf_geo &lt;- df[!is.na(df$Latitude),]\ndf_geo &lt;- df_geo[df_geo$Latitude &gt; 30,]\n\n\n\n\nCode\nggplot() +\n  geom_polygon(data=nyc_map, aes(x = long, y = lat, group = group),\n               fill = \"grey\", color = \"black\") + \n  geom_bin2d(data=df_geo, aes(x = Longitude, y = Latitude), \n            binwidth = c(0.004, 0.004), alpha=0.9) +\n  scale_fill_gradientn(colors = inferno(100), \n                       name = \"Density\",limits = c(-100, 1500)) +\n  coord_fixed(ratio = 1.2) +\n  theme_void()\n\n\n\n\n\n\n\nCode\np &lt;- ggplot() +\n  geom_polygon(data=nyc_map, aes(x = long, y = lat, group = group),\n               fill = \"grey\", color = \"black\") + \n  geom_bin2d(data=df_geo, aes(x = Longitude, y = Latitude), \n            binwidth = c(0.004, 0.004), alpha=0.9) +\n  scale_fill_gradientn(colors = inferno(100), \n                       name = \"Count/Pixel\",limits = c(-10, 100)) +\n  coord_fixed(ratio = 1.2) +\n  theme_void() +\n  labs(title = \"Hour: {frame}\")\n  \n# Here comes the gganimate specific bits\nanimated_plot &lt;- p + transition_manual(Hour) +\n  enter_fade() +\n  exit_fade()\n\nanimate(animated_plot)\n\n\nnframes and fps adjusted to match transition\n\n\n\n\n\n\n\nCode\nfilter &lt;- df_geo$OFNS_DESC == 'PETIT LARCENY'\np &lt;- ggplot() +\n  geom_polygon(data=nyc_map, aes(x = long, y = lat, group = group),\n               fill = \"grey\", color = \"black\") + \n  geom_bin2d(data=df_geo[filter, ], aes(x = Longitude, y = Latitude), \n            binwidth = c(0.004, 0.004), alpha=0.9) +\n  scale_fill_gradientn(colors = inferno(100), \n                       name = \"Petit Larceny/Pixel\",limits = c(-5, 40)) +\n  coord_fixed(ratio = 1.2) +\n  theme_void() +\n  labs(title = \"Hour: {frame}\")\n  \n# Here comes the gganimate specific bits\nanimated_plot &lt;- p + transition_manual(Hour) +\n  enter_fade() +\n  exit_fade()\n\nanimate(animated_plot)\n\n\nWarning: Removed 7 rows containing non-finite values (`stat_bin2d()`).\n\n\nnframes and fps adjusted to match transition\n\n\n\n\n\n\n\nCode\nfilter &lt;- df_geo$OFNS_DESC == 'HARRASSMENT 2'\np &lt;- ggplot() +\n  geom_polygon(data=nyc_map, aes(x = long, y = lat, group = group),\n               fill = \"grey\", color = \"black\") + \n  geom_bin2d(data=df_geo[filter, ], aes(x = Longitude, y = Latitude), \n            binwidth = c(0.004, 0.004), alpha=0.9) +\n  scale_fill_gradientn(colors = inferno(100), \n                       name = \"Harrassment/Pixel\",limits = c(-1, 10)) +\n  coord_fixed(ratio = 1.2) +\n  theme_void() +\n  labs(title = \"Hour: {frame}\")\n  \n# Here comes the gganimate specific bits\nanimated_plot &lt;- p + transition_manual(Hour) +\n  enter_fade() +\n  exit_fade()\n\nanimate(animated_plot)\n\n\nWarning: Removed 7 rows containing non-finite values (`stat_bin2d()`).\n\n\nnframes and fps adjusted to match transition\n\n\n\n\n\n\n\nCode\nfilter &lt;- df_geo$OFNS_DESC == 'ASSAULT 3 & RELATED OFFENSES'\np &lt;- ggplot() +\n  geom_polygon(data=nyc_map, aes(x = long, y = lat, group = group),\n               fill = \"grey\", color = \"black\") + \n  geom_bin2d(data=df_geo[filter, ], aes(x = Longitude, y = Latitude), \n            binwidth = c(0.004, 0.004), alpha=0.9) +\n  scale_fill_gradientn(colors = inferno(100), \n                       name = \"Misdemeanor Assault/Pixel\",limits = c(-1, 10)) +\n  coord_fixed(ratio = 1.2) +\n  theme_void() +\n  labs(title = \"Hour: {frame}\")\n  \n# Here comes the gganimate specific bits\nanimated_plot &lt;- p + transition_manual(Hour) +\n  enter_fade() +\n  exit_fade()\n\nanimate(animated_plot)\n\n\nWarning: Removed 7 rows containing non-finite values (`stat_bin2d()`).\n\n\nnframes and fps adjusted to match transition\n\n\n\n\n\n\n\nCode\nfilter &lt;- df_geo$OFNS_DESC == 'GRAND LARCENY'\np &lt;- ggplot() +\n  geom_polygon(data=nyc_map, aes(x = long, y = lat, group = group),\n               fill = \"grey\", color = \"black\") + \n  geom_bin2d(data=df_geo[filter, ], aes(x = Longitude, y = Latitude), \n            binwidth = c(0.004, 0.004), alpha=0.9) +\n  scale_fill_gradientn(colors = inferno(100), \n                       name = \"Grand Larceny/Pixel\",limits = c(-1, 10)) +\n  coord_fixed(ratio = 1.2) +\n  theme_void() +\n  labs(title = \"Hour: {frame}\")\n  \n# Here comes the gganimate specific bits\nanimated_plot &lt;- p + transition_manual(Hour) +\n  enter_fade() +\n  exit_fade()\n\nanimate(animated_plot)\n\n\nWarning: Removed 7 rows containing non-finite values (`stat_bin2d()`).\n\n\nnframes and fps adjusted to match transition\n\n\n\n\n\n\n\nCode\nfilter &lt;- df_geo$OFNS_DESC == 'FELONY ASSAULT'\np &lt;- ggplot() +\n  geom_polygon(data=nyc_map, aes(x = long, y = lat, group = group),\n               fill = \"grey\", color = \"black\") + \n  geom_bin2d(data=df_geo[filter, ], aes(x = Longitude, y = Latitude), \n            binwidth = c(0.004, 0.004), alpha=0.9) +\n  scale_fill_gradientn(colors = inferno(100), \n                       name = \"Felony Assault/Pixel\",limits = c(-1, 10)) +\n  coord_fixed(ratio = 1.2) +\n  theme_void() +\n  labs(title = \"Hour: {frame}\")\n  \n# Here comes the gganimate specific bits\nanimated_plot &lt;- p + transition_manual(Hour) +\n  enter_fade() +\n  exit_fade()\n\nanimate(animated_plot)\n\n\nWarning: Removed 7 rows containing non-finite values (`stat_bin2d()`).\n\n\nnframes and fps adjusted to match transition"
  }
]